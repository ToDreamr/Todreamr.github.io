<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on 春江花朝秋月夜</title>
    <link>/algorithm/</link>
    <description>Recent content in Algorithms on 春江花朝秋月夜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2024 春江花朝秋月夜</copyright>
    <lastBuildDate>Tue, 14 Nov 2023 13:47:44 +0800</lastBuildDate><atom:link href="/algorithm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>区间个位和</title>
      <link>/algorithm/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/</link>
      <pubDate>Tue, 14 Nov 2023 13:47:44 +0800</pubDate>
      
      <guid>/algorithm/%E7%AE%97%E6%B3%95/%E6%95%B0%E5%AD%A6/</guid>
      <description>计算区间之间的所有数的个位数之和 #思路： 总体用数学办法，45循环，补齐不全的区间
#include &amp;#34;class/head.h&amp;#34; //导入万能依赖 long long Sum(long long left,long long right,long long len) { long long left_sum=0,right_sum=0; long long left_len,right_len; left_len=right_len=0; if(left!=0)//计算左补齐 { left_sum=((left-1)*left)/2.0; left_len=left; } if(right!</description>
      
    </item>
    
    <item>
      <title>数之和</title>
      <link>/algorithm/%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B9%8B%E5%92%8C/</link>
      <pubDate>Tue, 14 Nov 2023 13:47:44 +0800</pubDate>
      
      <guid>/algorithm/%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B9%8B%E5%92%8C/</guid>
      <description>题目：
两数之和
三数之和
class Main{ //两数之和 public static int[] twoSum(int[] nums, int target) { //找出和为target的数组中元素的下标： HashMap&amp;lt;Integer,Integer&amp;gt; dic=new HashMap&amp;lt;&amp;gt;();//和 int index=0; int dicIndex=0; int len=nums.length; Set&amp;lt;Integer&amp;gt; list=new HashSet&amp;lt;&amp;gt;(); for (int i=0;i&amp;lt;len;i++){ dic.</description>
      
    </item>
    
    <item>
      <title>二分法</title>
      <link>/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E4%BA%8C%E5%88%86%E6%B3%95/</guid>
      <description>确定区间
左闭右闭
left = 0; right = nums.size() - 1; while(left &amp;lt;= right){ // 区间为空 结束循环 ： (l &amp;gt; r) //左右相等是合法区间，比如【1，1】只有 元素1 mid = left + (right-left)&amp;gt;&amp;gt;2; if(nums[mid]&amp;gt;target){ right = mid -1;//为了不包含原来的nums[mid],所以减一 }else if(nums[mid]&amp;lt;target){ left = mid +1; }else return mid; } return -1; class Solution { public int search(int[] nums, int target) { int left = 0; int right = nums.</description>
      
    </item>
    
    <item>
      <title>复杂度</title>
      <link>/algorithm/%E7%AE%97%E6%B3%95/c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E7%AE%97%E6%B3%95/c/</guid>
      <description>master公式：
在编程中，递归是非常常见的一种算法，由于代码简洁而应用广泛，但递归相比顺序执行或循环程序，时间复杂度难以计算，而master公式就是用于计算递归程序的时间复杂度。
T(N) = a*T(N/b) + O(N^d);
​ 下面对参数进行解释:
b：子过程的样本量 a：子过程的计算次数 O(N^d)：子结果合并的时间复杂度 满足如上公式的程序都可以根据master公式计算时间复杂度：
log(b，a) &amp;gt; d ：时间复杂度为O(N^log(b，a)) log(b，a) = d ：时间复杂度为O(N^d * logN) log(b，a) &amp;lt; d ：时间复杂度为O(N^d)
在学习归并排序之前，我们先学习一个简单的算法:当我们求一个值的中值时，可以使用：
int mid = L + ((R - L) &amp;raquo; 1); 注意使用位运算更好，之后采用这种方法来计算平均数</description>
      
    </item>
    
    <item>
      <title>哈希篇</title>
      <link>/algorithm/%E5%93%88%E5%B8%8C%E7%AF%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E5%93%88%E5%B8%8C%E7%AF%87/</guid>
      <description>字母异位词
class Solution { public: bool isAnagram(string s, string t) { int record[26] = {0}; for (int i = 0; i &amp;lt; s.size(); i++) { // 并不需要记住字符a的ASCII，只要求出一个相对数值就可以了 record[s[i] - &amp;#39;a&amp;#39;]++; } for (int i = 0; i &amp;lt; t.</description>
      
    </item>
    
    <item>
      <title>链表的基本操作</title>
      <link>/algorithm/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</guid>
      <description>ADT模型
&amp;lt;--java--&amp;gt; public class ListNode { // 结点的值 int val; // 下一个结点 ListNode next; // 节点的构造函数(无参) public ListNode() { } // 节点的构造函数(有一个参数) public ListNode(int val) { this.val = val; } // 节点的构造函数(有两个参数) public ListNode(int val, ListNode next) { this.</description>
      
    </item>
    
    <item>
      <title>链表篇</title>
      <link>/algorithm/%E9%93%BE%E8%A1%A8%E7%AF%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E9%93%BE%E8%A1%A8%E7%AF%87/</guid>
      <description>翻转链表
class Solution { public: //翻转链表 //输入：head = [1,2,3,4,5] //输出：[5,4,3,2,1] //双指针法 ListNode *reverseList(ListNode *head) { ListNode *cur = head; ListNode *pre = NULL; ListNode *tmp = cur;//保存变量 while (cur) { tmp = cur-&amp;gt;next;//保存原来的下一个指向 cur-&amp;gt;next = pre;//将下一个指向改为pre pre = cur;//修改pre往前移动一格 cur = tmp;//修改cur往前移动一格 } return pre; } //递归法 ListNode *reverse(ListNode *cur,ListNode *pre){ if(cur == NULL) return pre; ListNode *tmp= NULL; tmp=cur-&amp;gt;next; cur-&amp;gt;next=pre; return reverse(tmp,cur); } }; 环形链表</description>
      
    </item>
    
    <item>
      <title>螺旋矩阵</title>
      <link>/algorithm/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</guid>
      <description>处理边界条件？
循环不可靠！找到循环不变量！
#include &amp;#34;../cunion.h&amp;#34; class Solution { public: vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; generateMatrix(int n) { int num = 1; //注意这里是全闭区间 vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrix(n, vector&amp;lt;int&amp;gt;(n)); int left = 0, right = n - 1, top = 0, bottom = n - 1; while (left &amp;lt;= right &amp;amp;&amp;amp; top &amp;lt;= bottom) { //从左往右 for (int column = left; column &amp;lt;= right; ++column) { matrix[top][column] = num; num++; } for (int row = top + 1; row &amp;lt;= bottom; ++row) { matrix[row][right] = num; num++; } //从右往左 if (left &amp;lt; right &amp;amp;&amp;amp; top &amp;lt; bottom) { for (int column = right - 1; column &amp;gt; left; --column) { matrix[bottom][column] = num; num++; } for (int row = bottom; row &amp;gt; top; --row) { matrix[row][left] = num; num++; } } left++; right--; top++; bottom--; } return matrix; } }; int main() { Solution *solution; vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; vo = solution-&amp;gt;generateMatrix(4); for (int i = 0; i &amp;lt; vo.</description>
      
    </item>
    
    <item>
      <title>移除元素</title>
      <link>/algorithm/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</guid>
      <description>删除元素
指的是覆盖而不是的的确确的删除
C++ vector作为数组的封装
erase函数：删除：O(n)
双指针实现
class Solution { public: int removeElement(vector&amp;lt;int&amp;gt;&amp;amp; nums, int val) { //定义快慢指针 int fast = 0;//获取新元素 int slow = 0;//获取更改位置 for(fast = 0; fast &amp;lt; nums.</description>
      
    </item>
    
    <item>
      <title>有序数组的平方</title>
      <link>/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</guid>
      <description>977
有序数组的平方
输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100] 排序后，数组变为 [0,1,9,16,100] 最大元素在两边，使用两个指针从两边到中间合拢
更新方法从大到小
vector&amp;lt;int&amp;gt;result(nums.size(),0); int k=nums.size()-1;//新数组的下标 int i=0,j=nums.size()-1; //分别从两边往中间取 while(i&amp;lt;=j){ if(nums[i]*nums[i]&amp;lt;nums[j]*nums[j]){ result[k--]=nums[j]*nums[j]; j--; } //num[i]*nums[i] &amp;gt;= nums[j]*nums[j] else { result[k--]=nums[i]*nums[i]; i++; } } return result; class Solution { public int[] sortedSquares(int[] nums) { int []res = new int [nums.</description>
      
    </item>
    
    <item>
      <title>长度最小的数组</title>
      <link>/algorithm/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0%E7%BB%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/algorithm/%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0%E7%BB%84/</guid>
      <description>209
给定一个含有 n 个正整数的数组和一个正整数 target 。
找出该数组中满足其总和大于等于 target 的长度最小的 连续 子数组 [numsl, numsl+1, &amp;hellip;, numsr-1, numsr] ，并返回其长度。如果不存在符合条件的子数组，返回 0 。
输入：target = 7, nums = [2,3,1,2,4,3] 输出：2 解释：子数组 [4,3] 是该条件下的长度最小的子数组。 #include &amp;lt;iostream&amp;gt; #include &amp;lt;cstdio&amp;gt; #include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; using namespace std; class Solution { public: int minSubArrayLen(int target, vector&amp;lt;int&amp;gt;&amp;amp; nums) { int right = nums.</description>
      
    </item>
    
  </channel>
</rss>
