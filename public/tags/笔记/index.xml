<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>笔记 on 春江花朝秋月夜</title>
    <link>/tags/%E7%AC%94%E8%AE%B0/</link>
    <description>Recent content in 笔记 on 春江花朝秋月夜</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <copyright>© 2024 春江花朝秋月夜</copyright>
    <lastBuildDate>Thu, 14 Mar 2024 18:23:23 +0800</lastBuildDate><atom:link href="/tags/%E7%AC%94%E8%AE%B0/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mac体验版</title>
      <link>/%E7%AC%94%E8%AE%B0/mac%E4%BD%93%E9%AA%8C%E7%89%88bushi/</link>
      <pubDate>Thu, 14 Mar 2024 18:23:23 +0800</pubDate>
      
      <guid>/%E7%AC%94%E8%AE%B0/mac%E4%BD%93%E9%AA%8C%E7%89%88bushi/</guid>
      <description>经过我的不懈努力，RedmiBook终于变成了Mac Book⬇️⬇️
参考笔记 参考视频 #目前看起来还行：
不得不说这个文件夹样式效果真好：
偶尔出现卡顿，之后记录</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="/%E7%AC%94%E8%AE%B0/mac%E4%BD%93%E9%AA%8C%E7%89%88bushi/featured.png" />
    </item>
    
    <item>
      <title>爬虫浅记</title>
      <link>/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB/</link>
      <pubDate>Wed, 13 Mar 2024 18:23:23 +0800</pubDate>
      
      <guid>/%E7%AC%94%E8%AE%B0/%E7%88%AC%E8%99%AB/</guid>
      <description>目的：使用爬虫爬取都应指定视频下方的所有评论 #接电商小公司的面试需求
参考视频
知道了爬虫的基本原理是模仿正常用户的操作获取相关信息，下面是实际操作的记录
过程：
先是去抖音网站获取评论的api接口，拉取下来后使用ApiPost测试发现返回&amp;quot;block&amp;quot;阻塞信息 而后添加了相关请求头，发现加入User-Agent是关键信息 然而每次获取不同的视频发现有更改的参数：XBogus，这个参数是网站后台通过函数循环调用自己生成的（反爬） 遂通过浏览器断点调试最终追踪堆栈到生成函数： function _0x5a8f25(_0x48914f, _0xa771aa) { return (&amp;#39;undefined&amp;#39; == typeof window ? global : window)[&amp;#39;_$webrt_1668687510&amp;#39;](args) } 于是通过Node调试js文件，模拟循环过程生成参数 window = global; document = { refferer:&amp;#39;https://www.</description>
      
    </item>
    
    <item>
      <title>Waline评论系统</title>
      <link>/%E7%AC%94%E8%AE%B0/%E6%80%8E%E4%B9%88%E8%AF%84%E8%AE%BA/</link>
      <pubDate>Mon, 11 Mar 2024 18:23:23 +0800</pubDate>
      
      <guid>/%E7%AC%94%E8%AE%B0/%E6%80%8E%E4%B9%88%E8%AF%84%E8%AE%BA/</guid>
      <description>Waline博客网站评论 #注册账号 #注册账号✈️
创建应用✈️
创建仓库-》用于存放评论
创建好之后，去到settings里面修改Environment三个参数
LEAN_ID：AppId LEAN_KEY：App_key LEAN_MASTER_KEY：Master_KEY
添加好之后，刷新工作流
通过HTML部署
导入样式文件和js脚本文件
通过Waline的配置键添加自定义的东西
注：借鉴自金圣浩
&amp;lt;br/&amp;gt; &amp;lt;span style=&amp;#34;color:rgba(var(--color-neutral-400),var(--tw-text-opacity));&amp;#34;&amp;gt; &amp;lt;span class=&amp;#34;post-meta-item-text&amp;#34; &amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;{{i18n &amp;#34;article.page_views&amp;#34;}}: &amp;lt;/span&amp;gt; &amp;lt;span class=&amp;#34;waline-pageview-count&amp;#34;&amp;gt;⏳&amp;lt;/span&amp;gt;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;br/&amp;gt; &amp;lt;/span&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; document.</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="/%E7%AC%94%E8%AE%B0/%E6%80%8E%E4%B9%88%E8%AF%84%E8%AE%BA/featured.png" />
    </item>
    
    <item>
      <title>自用的Vscode个人觉得还算耐看的主题和字体以及编码习惯</title>
      <link>/%E7%AC%94%E8%AE%B0/vscode/</link>
      <pubDate>Sat, 02 Mar 2024 13:22:59 +0800</pubDate>
      
      <guid>/%E7%AC%94%E8%AE%B0/vscode/</guid>
      <description>Java 选手为什么用 Vscode 了？
答：苦于 IDEA 的启动速度，本人的电脑带不动了很多了，就算改了索引和 Maven，经常还是要编辑 js，vue，html 文件，小全栈辣鸡吧，故而转战 Vscode。并不完全弃坑 IDEA
目前调教 Vscode 还算挺好哒哈哈，好用呀！！！
这里我选择了本地的 Maven 和用于日语的字体()，主题选用的是：Default Dark Modern，目前看起来还行，经典就是好，配合我的背景图片很搭!
当选择编写 Spring 应用程序时可选用 Idea 主题，较为接近 Jetbrains 家族的 Idea,字体选用的是 JetBrains 家族的 JetBrains Mono，normal 版；</description>
      <media:content xmlns:media="http://search.yahoo.com/mrss/" url="/%E7%AC%94%E8%AE%B0/vscode/featured.png" />
    </item>
    
    <item>
      <title>Docker</title>
      <link>/docker/</link>
      <pubDate>Thu, 08 Feb 2024 14:22:59 +0800</pubDate>
      
      <guid>/docker/</guid>
      <description>Docker镜像基本命令 #systemctl stop firewalld systemctl disable firewalld 启动Docker
systemctl start docker systemctl restart docker docker -v 配置镜像
sudo mkdir -p /etc/docker sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;- &amp;#39;EOF&amp;#39; { &amp;#34;registry-mirrors&amp;#34;:[&amp;#34;https://n0dwetq.mirror.aliyuncs.com&amp;#34;] } EOF sudo systemctl daemon-reload sudo systemctl restart docker 镜像操作</description>
      
    </item>
    
    <item>
      <title>Music</title>
      <link>/entire-note/music_build/</link>
      <pubDate>Wed, 07 Feb 2024 19:22:59 +0800</pubDate>
      
      <guid>/entire-note/music_build/</guid>
      <description>搭建本站音乐 #搭建过程绕了一些弯子，吃了前端的亏，主要借鉴了金圣皓，得知了目前主流的博客音乐依托于APlayer&amp;amp;Meting JS,前者是嵌入HTML的音乐组件库，后者是可用通过网易，QQ音乐等网站的音乐插件，本网站作为静态页面，故只需通过CDN引入即可
网站搭建主题为Blowfish，在blog/layouts/shortcodes文件夹下添加album.html文件
这里采用的是网易音乐的歌单，获取歌单id自行从&lt;?xml version=&#34;1.0&#34; standalone=&#34;no&#34;?&gt;&lt;!DOCTYPE svg PUBLIC &#34;-//W3C//DTD SVG 1.1//EN&#34; &#34;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&#34;&gt;网易云音乐歌单中获取
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.css&amp;#34;&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/aplayer/dist/APlayer.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/meting@2.0.1/dist/Meting.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/color-thief@2.2.5/js/color-thief.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;span style=&amp;#34;color:#111827&amp;#34;&amp;gt; &amp;lt;!--{{.Get 0}}作为歌单参数由引用组件处添加--&amp;gt; &amp;lt;meting-js server=&amp;#34;netease&amp;#34; type=&amp;#34;playlist&amp;#34; id=&amp;#34;{{.</description>
      
    </item>
    
    <item>
      <title>本站Music搭建相关</title>
      <link>/%E7%AC%94%E8%AE%B0/music/</link>
      <pubDate>Wed, 07 Feb 2024 19:22:59 +0800</pubDate>
      
      <guid>/%E7%AC%94%E8%AE%B0/music/</guid>
      <description>搭建本站音乐 #搭建过程绕了一些弯子，吃了前端的亏，主要借鉴了金圣皓，得知了目前主流的博客音乐依托于APlayer&amp;amp;Meting JS,前者是嵌入HTML的音乐组件库，后者是可用通过网易，QQ音乐等网站的音乐插件，本网站作为静态页面，故只需通过CDN引入即可
Meting Js参数,官方文档
&amp;lt;!--MetingJS参数详情--&amp;gt; &amp;lt;!-- id=&amp;#39;外链播放器id&amp;#39;,必须参数 type=[song=单曲, playlist=歌单, album=专辑, search=搜索结果, artist=艺术家],必须参数 server=[netease=网易云音乐, tencent=QQ音乐, kugou=酷狗音乐, xiami=虾米音乐, baidu=百度音乐],必须参数 fixed=启用固定模式，固定在左下角,默认false mini=启用迷你模式,默认false preload=[none,metadata,auto] mutex=[互斥锁，默认true],默认false order=[random=随机播放,list=列表播放] loop=[all=全部循环, one=循环一次 ,none=不循环] volume=[音量，默认0.</description>
      
    </item>
    
  </channel>
</rss>
